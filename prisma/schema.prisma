generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id         String      @id @default(uuid())
  name       String
  companions Companion[]
}

model Voice {
  id         String      @id @default(uuid())
  name       String
  voice_id   String      
  sample_url String
  companions Companion[]
}

model PhoneVoice {
    id       String      @id @default(uuid())
    name     String
    voice_id Int
    reduceLatency Boolean @default(true)
    companions Companion[]
    is_preset   Boolean @default(false)
    voice_preset    String @default("")
}

model Companion {
  id             String    @id @default(uuid())
  userId         String
  userName       String
  src            String
  name           String    @db.Text
  description    String    @db.Text
  personality    String    @db.Text
  behaviour      String    @db.Text
  selfiePre      String    @db.Text
  selfiePost     String    @db.Text
  seed           String    @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  categoryId     String
  instanceHandle String   @db.Text @default(uuid())
  packageName    String   @db.Text 
  workspaceName  String   @db.Text @default(uuid())
  model          String   @default("NousResearch/Nous-Hermes-Llama2-13b")
  imageModel     String   @default("realistic")
  createImages   Boolean  @default(true)
  isPublic       Boolean  @default(true)
  voiceId        String   @default("none")
  category       Category  @relation(fields: [categoryId], references: [id])
  voice          Voice    @relation(fields: [voiceId], references: [id])
  phoneVoiceId   String   @default("302df500-b53f-4e33-bcd7-1e06d06cebc5")  
  phoneVoice     PhoneVoice  @relation(fields: [phoneVoiceId], references: [id])
  backstory      String   @db.LongText
  messages       Message[]

  @@index([categoryId])
  @@fulltext([name])
}

model Message {
  id          String    @id @default(uuid())
  role        Role
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  companionId String
  userId      String
  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@index([companionId])
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

model UserBalance {
  id           String @id @default(uuid())
  userId       String @unique
  tokenCount   Int    @default(0)
  messageCount Int    @default(0)
  messageLimit Int    @default(0)
  tokenLimit   Int    @default(0)
  firstMessage DateTime?
  lastMessage  DateTime?
  proTokens    Int @default(0)
  callTime     Int @default(0)
}

enum Role {
  user
  system
}

model CallLog {
    id        String @id @default(uuid())
    userId    String
    companionId String
    duration    String?
    status    String?
}
